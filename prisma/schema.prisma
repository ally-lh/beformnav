// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    SUPERADMIN
    ADMIN
    CONSULTANT
    HIGHER_USER
    USER
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    role          UserRole   @default(USER)
    answers       Answer[]
    userForms     UserForm[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Form {
    id           String        @id @default(cuid())
    title        String
    description  String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    userForms    UserForm[]
    formSections FormSection[]
}

model FormSection {
    formId    String
    sectionId String
    order     Int
    form    Form    @relation(fields: [formId], references: [id])
    section Section @relation(fields: [sectionId], references: [id])

    @@id([formId, sectionId])
}

model Section {
    id           String        @id @default(cuid())
    title        String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    questions    Question[]
    formSections FormSection[]
}

model Question {
    id        String   @id @default(cuid())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    answers   Answer[]
    Section   Section? @relation(fields: [sectionId], references: [id])
    sectionId String?
}

model UserForm {
    userId  String
    user    User     @relation(fields: [userId], references: [id])
    formId  String
    form    Form     @relation(fields: [formId], references: [id])
    answers Answer[]

    @@id([userId, formId])
}

model Answer {
    id             String    @id @default(cuid())
    value          String
    questionId     String
    question       Question  @relation(fields: [questionId], references: [id])
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    User           User?     @relation(fields: [userId], references: [id])
    userId         String?
    UserForm       UserForm? @relation(fields: [userFormUserId, userFormFormId], references: [userId, formId])
    userFormUserId String?
    userFormFormId String?
}
